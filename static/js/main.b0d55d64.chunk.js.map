{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","components/UserSelect/UserSelect.jsx","api/users.js","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","fetch","then","response","json","PostsList","person","selectedPostId","postId","useState","posts","setPosts","buttonStatus","setButtonStatus","id","name","useEffect","result","data","filter","post","userId","className","map","key","title","type","onClick","event","postID","target","innerText","NewCommentForm","commentUpdate","setName","email","setEmail","setTitle","onSubmit","preventDefault","placeholder","required","value","onChange","PostDetails","comments","deleteComment","loadComments","isChoosen","hidden","setHidden","body","url","options","method","JSON","stringify","addComment","Object","keys","length","comment","UserSelect","select","users","setUsers","user","i","arr","address","findIndex","item","App","setPerson","setPostId","setPost","setIsChoosen","setComments","getPostComments","getPostDetails","commentId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0d55d64.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = () => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json());\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json());\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(result => result.data.filter(comment => comment.postId === postId));\n\nexport const deleteComment = (commentId) => {\n  const url = `${BASE_URL}/comments/${commentId}`;\n  const options = {\n    method: 'DELETE',\n  };\n\n  return fetch(url, options)\n    .then(response => response.json());\n};\n\nexport const addComment = (postId, name, email, body) => {\n  const url = `${BASE_URL}/comments/`;\n  const options = {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  };\n\n  return fetch(url, options)\n    .then(response => response.json());\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ person, selectedPostId, postId }) => {\n  const [posts, setPosts] = useState([]);\n  const [buttonStatus, setButtonStatus] = useState(true);\n  const { id, name } = person;\n\n  useEffect(() => {\n    if (name && name !== 'All users') {\n      getUserPosts()\n        .then(result => setPosts(result.data\n          .filter(post => post.userId === id)));\n    } else {\n      getUserPosts()\n        .then(result => setPosts(result.data));\n    }\n  }, [name, id]);\n\n  const handleClick = (postID) => {\n    selectedPostId(postID, buttonStatus);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={(event) => {\n                event.target.innerText === 'Open'\n                  ? setButtonStatus(true)\n                  : setButtonStatus(false);\n                handleClick(post.id);\n              }}\n            >\n              {buttonStatus && post.id === postId ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  person: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  selectedPostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, commentUpdate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [title, setTitle] = useState('');\n\n  const handleClick = (event) => {\n    event.preventDefault();\n    commentUpdate(postId, name, email, title);\n    setName('');\n    setEmail('');\n    setTitle('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleClick}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  commentUpdate: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { addComment } from '../../api/posts';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  post,\n  comments,\n  deleteComment,\n  loadComments,\n  isChoosen,\n}) => {\n  const { title, id } = post;\n  const [hidden, setHidden] = useState(true);\n\n  const commentUpdate = (postId, name, email, body) => addComment(postId, name, email, body);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isChoosen && Object.keys(post).length !== 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setHidden(!hidden)}\n            >\n              {hidden\n                ? `Hidden ${comments.length} `\n                  + `comment${comments.length !== 1 ? 's' : ''}`\n                : `Hide ${comments.length} `\n                  + `comment${comments.length !== 1 ? 's' : ''}`}\n            </button>\n\n            {!hidden && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        deleteComment(comment.id);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={id}\n                commentUpdate={(postId, name, email, body) => {\n                  commentUpdate(postId, name, email, body)\n                    .then(() => loadComments(id));\n                }}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  loadComments: PropTypes.func.isRequired,\n  isChoosen: PropTypes.bool.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ select, name }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => setUsers(result.data\n        .filter((user, i, arr) => user.address !== null\n          && i === arr.findIndex(item => user.name === item.name))));\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={name}\n        onChange={(event) => {\n          const { value } = event.target;\n\n          if (value === 'All users') {\n            select({ name: 'All users' });\n\n            return;\n          }\n\n          const person = users.filter(user => user.name === value)[0];\n\n          select(person);\n        }}\n      >\n        <option value=\"All users\">All users</option>\n        {users.map(user => (\n          <option\n            value={user.name}\n            key={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  select: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = () => fetch(`${BASE_URL}/users`)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { getPostDetails, getPostComments, deleteComment } from './api/posts';\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [person, setPerson] = useState({});\n  const [postId, setPostId] = useState();\n  const [post, setPost] = useState({});\n  const [isChoosen, setIsChoosen] = useState(false);\n  const [comments, setComments] = useState([]);\n\n  const select = (user) => {\n    setPerson(user);\n  };\n\n  const loadComments = (id) => {\n    getPostComments(id)\n      .then(result => setComments(result));\n  };\n\n  const selectedPostId = (id, buttonStatus) => {\n    setIsChoosen(buttonStatus);\n    setPostId(id);\n\n    getPostDetails(id)\n      .then(result => setPost(result.data));\n\n    loadComments(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          select={select}\n          name={person.name}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            person={person}\n            postId={postId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            post={post}\n            comments={comments}\n            deleteComment={commentId => deleteComment(commentId)\n              .then(() => loadComments(postId))\n            }\n            loadComments={loadComments}\n            isChoosen={isChoosen}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}